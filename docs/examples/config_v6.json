{
    "shortName": "Final Task 2",
    "allowedExercises": [
        42
    ],
    "positiveFeedbackAllowed": true,
    "ratingGroups": [
        {
            "shortName": "functionality",
            "displayName": "Funktionalität",
            "negativeLimit": -20,
            "positiveLimit": null
        },
        {
            "shortName": "modelling",
            "displayName": "OO-Modellierung",
            "negativeLimit": -16,
            "positiveLimit": null
        },
        {
            "shortName": "understandability",
            "displayName": "Verständlichkeit/Komplexität"
        },
        {
            "shortName": "style",
            "displayName": "Programmierstil",
            "negativeLimit": -7,
            "positiveLimit": null
        }
    ],
    "mistakeTypes": [
        {
            "shortName": "custom",
            "button": {
                "de": "Custom Penalty"
            },
            "message": {
                "de": ""
            },
            "penaltyRule": {
                "shortName": "customPenalty"
            },
            "appliesTo": "style"
        },
        {
            "shortName": "jdEmpty",
            "button": {
                "de": "JavaDoc Leer"
            },
            "message": {
                "de": "JavaDoc ist leer oder nicht vorhanden"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 5
            },
            "appliesTo": "style"
        },
        {
            "shortName": "jdTrivial",
            "button": {
                "de": "JavaDoc Trivial"
            },
            "message": {
                "de": "JavaDoc beschreibt nur triviales und die Fehlerfälle werden nicht beachtet"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 5
            },
            "appliesTo": "style"
        },
        {
            "shortName": "complexCode",
            "button": {
                "de": "schwieriger Code"
            },
            "message": {
                "de": "Sehr komplexe Codestelle; es fehlt ein erklärender Kommentar oder der Code sollte durch geeignete Hilfsmethoden strukturiert werden"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 5
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "magicNumber",
            "button": {
                "de": "Magic Number"
            },
            "message": {
                "de": "Magic Numbers / Strings"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 5
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "identifierNaming",
            "button": {
                "de": "Schlechte Bezeichner"
            },
            "message": {
                "de": "Schlechte Bezeichner/Methodennamen oder unnötige Abkürzungen"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "toDO",
            "button": {
                "de": "Kommentare"
            },
            "message": {
                "de": "Code enthält TODOs, auskommentierte Methoden, unnötige Ausagen"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "staticCode",
            "button": {
                "de": "Statische Methode"
            },
            "message": {
                "de": "statische Hilfsmethode in Klasse A sollte eigentlich Instanzmethode sein"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "publicprivate",
            "button": {
                "de": "Sichtbarkeit"
            },
            "message": {
                "de": "Falsche Sichtbarkeit. Methode/Attribut sollte eigentlich eine andere Sichtbarkeit haben."
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "getterSetter",
            "button": {
                "de": "getterSetter für Listen"
            },
            "message": {
                "de": "(generierte) getter- und setter- für Implementierungsdetails (Kapselung verletzt), z.B. ArrayList"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "runtimeExcpetion",
            "button": {
                "de": "Runtime Exceptions"
            },
            "message": {
                "de": "ArrayIndexOutOfBoundsException oder NullPointerException fangen statt Größe von Array zu prüfen oder auf null zu prüfen."
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "codeCopyInheritance",
            "button": {
                "de": "Code Kopien Vererbung"
            },
            "message": {
                "de": "Code-Kopien, statt gemeinsame Funktionalität in Oberklasse"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "codeCopyHelper",
            "button": {
                "de": "Code Kopien Hilfsmethode"
            },
            "message": {
                "de": "Code-Kopien, statt gemeinsame Funktionalität in Hilfsmethode"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "wrongEnum",
            "button": {
                "de": "Enum/Vererbung"
            },
            "message": {
                "de": "Enum, wenn eigentlich Inheritance das richtige Mittel gewesen wäre"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "uiIO",
            "button": {
                "de": "IO/UI"
            },
            "message": {
                "de": "Ausgaben auf Terminal sind nicht in einer UI-Klasse verkapselt, sondern über die Domänenklassen verteilt, oder stark gemischt mit Logik"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "objectConcrete",
            "button": {
                "de": "Object"
            },
            "message": {
                "de": "Object statt konkrete Klasse verwendet"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "instanceOf",
            "button": {
                "de": "instanceof"
            },
            "message": {
                "de": "instanceof wird verwendet"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "setList",
            "button": {
                "de": "List statt set"
            },
            "message": {
                "de": "Statt mit einem Set mit einer List gearbeitet und immer auf contains geprüft."
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "depthMethod",
            "button": {
                "de": "Verschachtelungstiefe"
            },
            "message": {
                "de": "Zu tiefe Verschachtelungstiefe die trivialerweise und sinnvoll in eine private Untermethode verpackt hätte werden können"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "operationDomain",
            "button": {
                "de": "Operationen statt Domain"
            },
            "message": {
                "de": "Funktionalität ist nach Operationen aufgeteilt (d.h. bspw. Klasse für Finden, Ausgeben, Validieren von Entitäten aller verschiedenen Typen) statt Aufteilen in Domäne"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "finalAttribute",
            "button": {
                "de": "Final"
            },
            "message": {
                "de": "nicht-finale Attribute, die eigtl. final sein sollten"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "hardcodedLogic",
            "button": {
                "de": "Logik hartkodiert"
            },
            "message": {
                "de": "Keine Variabilität in der implementierten Logik, bspw. Parameter hartkodiert"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "utilityClassPrivateConstructor",
            "button": {
                "de": "Utility-Class: Konstruktor"
            },
            "message": {
                "de": "Utility-Klasse muss einen privaten Konstruktor haben"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "stringReference",
            "button": {
                "de": "Stringreferenzen"
            },
            "message": {
                "de": "Objekte werden über Strings referenziert, anstatt über typisierte Java-Referenzen."
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "staticAttribute",
            "button": {
                "de": "statisches Attribut"
            },
            "message": {
                "de": "statisches Attribut sollte Instanzattribut sein"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "assertIF",
            "button": {
                "de": "assert if"
            },
            "message": {
                "de": "assert werden statt if verwendet"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "exceptionControlFlow",
            "button": {
                "de": "Exceptions Kontrollfluss"
            },
            "message": {
                "de": "Exceptions werden für Kontrollfluss verwendet"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "tryCatch",
            "button": {
                "de": "try/catch Blöcke"
            },
            "message": {
                "de": "Try/catch Blöcke sind sehr groß und umfassen nicht nur die nötigen Konstrukte"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "javaAPI",
            "button": {
                "de": "JavaAPI"
            },
            "message": {
                "de": "Es wurde Funktionalität selber entwickelt, die bereits durch die Java-API zur Verfügung gestellt wird. z.B. eigene Listen statt java.util.List"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "javaDatastructure",
            "button": {
                "de": "Java-Datenstrukturen"
            },
            "message": {
                "de": "Es wurden nicht die aus der Java-API vorgegebenen Datenstrukturen (z.B. Listen, Set...) verwendet"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "javaSorting",
            "button": {
                "de": "Java-Sortierung"
            },
            "message": {
                "de": "Es wurden nicht die in der Java-API vorgegebenen Sortierwerkzeuge verwendet"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "wildcardImports",
            "button": {
                "de": "Wildcard Import"
            },
            "message": {
                "de": "Verwendung von Wildcards bei Importanweisung: z.B. import some.package.*;"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "wrongLoopType",
            "button": {
                "de": "Falscher Schleifentyp"
            },
            "message": {
                "de": "Nicht den geeignetsten Schleifentyp gewählt, z.B. While statt For oder For statt ForEach."
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "enumForRange",
            "button": {
                "de": "Enum/Mengen"
            },
            "message": {
                "de": "Enum für abgeschlossene Mengen"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "interfaceAgainst",
            "button": {
                "de": "Interface"
            },
            "message": {
                "de": "Interface statt konkrete Klasse verwenden"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "wrongLanguage",
            "button": {
                "de": "einheitliche Sprache"
            },
            "message": {
                "de": "Einheitliche Sprache für Kommentare/Ausgabe verwenden"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "sideAffectDocumention",
            "button": {
                "de": "Seiteneffekte"
            },
            "message": {
                "de": "Undokumentierte Seiteneffekte"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "unnecessaryComplex",
            "button": {
                "de": "unnötige Komplexität"
            },
            "message": {
                "de": "Codestelle ist unnötig komplex"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "unnecessary",
            "button": {
                "de": "Quatsch (C) JK"
            },
            "message": {
                "de": "Ungeschickte Lösung"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "parseInt",
            "button": {
                "de": "parseInt"
            },
            "message": {
                "de": "Keine Fehlerbehandlung beim Parsen von Strings zu Integer"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "errrorMessage",
            "button": {
                "de": "Fehlermeldung"
            },
            "message": {
                "de": "Fehlermeldung zu unspezifisch, z.B. nur Error, Fehler"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "package",
            "button": {
                "de": "Pakete"
            },
            "message": {
                "de": "bessere Aufteilung in Pakete"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "emptyCatch",
            "button": {
                "de": "Leeres Catch"
            },
            "message": {
                "de": "Leerer Catch-Block"
            },
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        }
    ]
}
