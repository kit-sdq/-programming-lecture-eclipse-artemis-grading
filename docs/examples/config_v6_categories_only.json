{
    "shortName": "Final Task 2",
    "allowedExercises": [
        42
    ],
    "positiveFeedbackAllowed": true,
    "ratingGroups": [
        {
            "shortName": "functionality",
            "displayName": "Funktionalität",
            "engDisplayName": "Functionality",
            "negativeLimit": -20,
            "positiveLimit": null
        },
        {
            "shortName": "modelling",
            "displayName": "OO-Modellierung",
            "engDisplayName": "OO-Modelling",
            "negativeLimit": -16,
            "positiveLimit": null
        },
        {
            "shortName": "understandability",
            "displayName": "Verständlichkeit/Komplexität",
            "engDisplayName": "Understandability/Complexity"
        },
        {
            "shortName": "style",
            "displayName": "Programmierstil",
            "engDisplayName": "Programming Style",
            "negativeLimit": -7,
            "positiveLimit": null
        }
    ],
    "mistakeTypes": [
        {
            "shortName": "custom",
            "button": "Custom Penalty",
            "message": "",
            "penaltyRule": {
                "shortName": "customPenalty"
            },
            "appliesTo": "style"
        },
        {
            "shortName": "jdEmpty",
            "button": "JavaDoc Leer",
            "message": "JavaDoc ist leer oder nicht vorhanden",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 5
            },
            "appliesTo": "style"
        },
        {
            "shortName": "jdTrivial",
            "button": "JavaDoc Trivial",
            "message": "JavaDoc beschreibt nur triviales und die Fehlerfälle werden nicht beachtet",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 5
            },
            "appliesTo": "style"
        },
        {
            "shortName": "complexCode",
            "button": "schwieriger Code",
            "message": "Sehr komplexe Codestelle; es fehlt ein erklärender Kommentar oder der Code sollte durch geeignete Hilfsmethoden strukturiert werden",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 5
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "magicNumber",
            "button": "Magic Number",
            "message": "Magic Numbers / Strings",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 5
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "identifierNaming",
            "button": "Schlechte Bezeichner",
            "message": "Schlechte Bezeichner/Methodennamen oder unnötige Abkürzungen",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "toDO",
            "button": "Kommentare",
            "message": "Code enthält TODOs, auskommentierte Methoden, unnötige Ausagen",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "staticCode",
            "button": "Statische Methode",
            "message": "statische Hilfsmethode in Klasse A sollte eigentlich Instanzmethode sein",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "publicprivate",
            "button": "Sichtbarkeit",
            "message": "Falsche Sichtbarkeit. Methode/Attribut sollte eigentlich eine andere Sichtbarkeit haben.",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "getterSetter",
            "button": "getterSetter für Listen",
            "message": "(generierte) getter- und setter- für Implementierungsdetails (Kapselung verletzt), z.B. ArrayList",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "runtimeExcpetion",
            "button": "Runtime Exceptions",
            "message": "ArrayIndexOutOfBoundsException oder NullPointerException fangen statt Größe von Array zu prüfen oder auf null zu prüfen.",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "codeCopyInheritance",
            "button": "Code Kopien Vererbung",
            "message": "Code-Kopien, statt gemeinsame Funktionalität in Oberklasse",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "codeCopyHelper",
            "button": "Code Kopien Hilfsmethode",
            "message": "Code-Kopien, statt gemeinsame Funktionalität in Hilfsmethode",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "wrongEnum",
            "button": "Enum/Vererbung",
            "message": "Enum, wenn eigentlich Inheritance das richtige Mittel gewesen wäre",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "uiIO",
            "button": "IO/UI",
            "message": "Ausgaben auf Terminal sind nicht in einer UI-Klasse verkapselt, sondern über die Domänenklassen verteilt, oder stark gemischt mit Logik",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "objectConcrete",
            "button": "Object",
            "message": "Object statt konkrete Klasse verwendet",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "instanceOf",
            "button": "instanceof",
            "message": "instanceof wird verwendet",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "setList",
            "button": "List statt set",
            "message": "Statt mit einem Set mit einer List gearbeitet und immer auf contains geprüft.",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "depthMethod",
            "button": "Verschachtelungstiefe",
            "message": "Zu tiefe Verschachtelungstiefe die trivialerweise und sinnvoll in eine private Untermethode verpackt hätte werden können",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "operationDomain",
            "button": "Operationen statt Domain",
            "message": "Funktionalität ist nach Operationen aufgeteilt (d.h. bspw. Klasse für Finden, Ausgeben, Validieren von Entitäten aller verschiedenen Typen) statt Aufteilen in Domäne",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "finalAttribute",
            "button": "Final",
            "message": "nicht-finale Attribute, die eigtl. final sein sollten",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "hardcodedLogic",
            "button": "Logik hartkodiert",
            "message": "Keine Variabilität in der implementierten Logik, bspw. Parameter hartkodiert",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "utilityClassPrivateConstructor",
            "button": "Utility-Class: Konstruktor",
            "message": "Utility-Klasse muss einen privaten Konstruktor haben",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "stringReference",
            "button": "Stringreferenzen",
            "message": "Objekte werden über Strings referenziert, anstatt über typisierte Java-Referenzen.",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "staticAttribute",
            "button": "statisches Attribut",
            "message": "statisches Attribut sollte Instanzattribut sein",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "assertIF",
            "button": "assert if",
            "message": "assert werden statt if verwendet",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "exceptionControlFlow",
            "button": "Exceptions Kontrollfluss",
            "message": "Exceptions werden für Kontrollfluss verwendet",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "tryCatch",
            "button": "try/catch Blöcke",
            "message": "Try/catch Blöcke sind sehr groß und umfassen nicht nur die nötigen Konstrukte",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "javaAPI",
            "button": "JavaAPI",
            "message": "Es wurde Funktionalität selber entwickelt, die bereits durch die Java-API zur Verfügung gestellt wird. z.B. eigene Listen statt java.util.List",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "javaDatastructure",
            "button": "Java-Datenstrukturen",
            "message": "Es wurden nicht die aus der Java-API vorgegebenen Datenstrukturen (z.B. Listen, Set...) verwendet",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "javaSorting",
            "button": "Java-Sortierung",
            "message": "Es wurden nicht die in der Java-API vorgegebenen Sortierwerkzeuge verwendet",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "wildcardImports",
            "button": "Wildcard Import",
            "message": "Verwendung von Wildcards bei Importanweisung: z.B. import some.package.*;",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "wrongLoopType",
            "button": "Falscher Schleifentyp",
            "message": "Nicht den geeignetsten Schleifentyp gewählt, z.B. While statt For oder For statt ForEach.",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "enumForRange",
            "button": "Enum/Mengen",
            "message": "Enum für abgeschlossene Mengen",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "interfaceAgainst",
            "button": "Interface",
            "message": "Interface statt konkrete Klasse verwenden",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "wrongLanguage",
            "button": "einheitliche Sprache",
            "message": "Einheitliche Sprache für Kommentare/Ausgabe verwenden",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "sideAffectDocumention",
            "button": "Seiteneffekte",
            "message": "Undokumentierte Seiteneffekte",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "unnecessaryComplex",
            "button": "unnötige Komplexität",
            "message": "Codestelle ist unnötig komplex",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "unnecessary",
            "button": "Quatsch (C) JK",
            "message": "Ungeschickte Lösung",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "parseInt",
            "button": "parseInt",
            "message": "Keine Fehlerbehandlung beim Parsen von Strings zu Integer",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "style"
        },
        {
            "shortName": "errrorMessage",
            "button": "Fehlermeldung",
            "message": "Fehlermeldung zu unspezifisch, z.B. nur Error, Fehler",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "understandability"
        },
        {
            "shortName": "package",
            "button": "Pakete",
            "message": "bessere Aufteilung in Pakete",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        },
        {
            "shortName": "emptyCatch",
            "button": "Leeres Catch",
            "message": "Leerer Catch-Block",
            "penaltyRule": {
                "shortName": "thresholdPenalty",
                "threshold": 1,
                "penalty": 2
            },
            "appliesTo": "modelling"
        }
    ]
}
